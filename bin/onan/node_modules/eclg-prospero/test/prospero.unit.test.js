var assert = require('assert');
var querystring = require('querystring');
var http = require('http');
var Prospero = require('../lib/prospero');


var sharedConfig = {
    host: "localhost",
    port: 4778,
    principal: "ONE",
    sharedKey: "1234567890123456",
    prosperoDefaults: {}
};


/**
 * Test the _parseTags function
 */
exports['test _parseTags'] = function(){
    var p = new Prospero({});
    var expected = "1:a,2:b,3:c"
    assert.equal(expected, p._parseTags({ "1":"a", "2":"b", "3":"c"}));
    assert.equal(expected, p._parseTags({1:"a",2:"b",3:"c"}));
};

/**
 * Test the formatTimestamp function
 */
exports['test formatTimestamp'] = function(){
    var p = new Prospero({});
    var timeInMs = 1302201068531; // for Thu Apr 07 2011 12:31:08 GMT-0600 (MDT)
    var expected = "2011-04-07T18:31:08Z"
    assert.equal(expected, p.formatTimestamp(new Date(timeInMs)));
};


/**
 * Test the mixin style config overrides
 */
exports['test config'] = function(){
    var config = {
        sharedKey: "aaaaaaaaaaa",
        principal: "asystemuser",
        rootUrl: "http://localhost:4778",
        prosperoDefaults: {
            client: "mytestclient",
            clientString: "myclientstring",
            system: "mysystem",
            subSystem: "mysubsystem",
            //payloadContentType: "application/json"
        }
    };
    
    var p = new Prospero(config);
    assert.equal(p.config.prosperoDefaults.payloadContentType, "application/json", "test a default value");
    assert.equal(p.config.prosperoDefaults.client, config.prosperoDefaults.client, "test an overriden value");
    assert.equal(p.config.sharedKey, config.sharedKey, "test an overriden value");
    assert.equal(p.config.rootUrl, config.rootUrl);
    assert.isUndefined(p.config.foo, "foo is a bogus value of config and should be undefined");    
    assert.isUndefined(p.config.prosperoDefaults.payload, "payload should be undefined");    
};

/**
 * Test the _parsePostBody function
 * actually create an HTTP server to POST to
 */

exports['test _parsePostBody'] = function() {
    var host = "localhost", port = 19998, callback;
    var postBody  = querystring.stringify({
	    "a":"1", b:"222"
	});
	
    var server = require('http').createServer(function (req, res) {
        assert.equal("POST", req.method);
        var p = new Prospero({});
        p._parsePostBody(req, callback);
        res.end();
    });
    server.listen(port, host);    

    var timeout = setTimeout(function() {
            server.close();
        }, 2000);
    
    callback = function(data) {
        assert.equal(data.a, "1");
        assert.equal(data.b, "222");
        server.close();
        clearTimeout(timeout);
    }
        
    var options = {
      host: host,
      port: port,
      path: "/test",
      method: "POST",
      headers: { 'content-type': 'application/x-www-form-urlencoded' }
    };

    var req = http.request(options, function(res) {});
    req.write(postBody);
    req.end();
};
