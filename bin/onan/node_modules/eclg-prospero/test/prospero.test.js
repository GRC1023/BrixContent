var assert = require('assert');
var querystring = require('querystring');
var http = require('http');
var Prospero = require('../lib/prospero');

var sharedConfig = {
    rootUrl: 'http://localhost:19801',
    principal: "ONE",
    sharedKey: "1234567890123456",
    prosperoDefaults: {}
};

exports['test _isValidProsperoMessage'] = function() {
    // a copied message actually sent from Prospero by the ONE principal with the 1234567890123456 shared key
    var message = { 
        'DELIVERY-ATTEMPT-ID': '7e1298db-3fae-4316-ac54-ae561e79d01a',
        'MESSAGE-TYPE': 'Browser.Activity',
        'MESSAGE-ID': '610e556b-fad9-4a99-b707-8adfb94042c5',
        AUTHORIZATION: 'ONE|2011-04-01T20:21:07Z|6152692d8176532b42333796f4727c8e',
        'AUTHORIZATION-DELIMITER': '|',
        PAYLOAD: '{"activity":{"name":"connected","user_agent":"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_6; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.204 Safari/534.16","user_agent_browser":"Chrome 10.0.648","user_agent_os":"OS X 10.6.6","flash_version":"10,2,154","referrer":"https://localhost:3000/test/index.html","browser_channel_transport":"websocket","served_from_host":"https://localhost:3000","page_id":"A146D7E5-320E-408F-9901-2ECFCF024218","ms_since_page_load":"26","datetime":"2011-04-01T20:21:07.710Z"}}',
        'PAYLOAD-CONTENT-TYPE': 'application/json' 
    };    

    var p = new Prospero(sharedConfig);    
    assert.ok(p._isValidProsperoMessage(message));
};




exports['unit test unsubscribe'] = function(){
    
    var p = new Prospero(sharedConfig);
    var subId = "1234567890";
    var cb = function(error, data) {
        assert.ok(!error);
    };
    
    p._send = function(httpMethod, uri, callback, headers, postBody) {
        assert.equal("DELETE", httpMethod);
        assert.equal('/v1/subscription/' + subId, uri);
        assert.isUndefined(postBody, "the postBody should be undefined");
        assert.equal(cb, callback, "callback passed in should be the same");
        callback(true, {}, "callback should have been passed an error flag");
    };
    
    p.unsubscribe(subId, cb);
};

// test with mack HTTP server
exports['test unsubscribe'] = function(){
    
    var subId = "1234567890";

    var server = require('http').createServer(function (req, res) {
        assert.equal("DELETE", req.method);
        assert.equal('/v1/subscription/' + subId, req.url);
        res.writeHead(200, {'Content-Type': 'application/json'});
        res.end(JSON.stringify({a:1}) + '\n');
    });
    server.listen(19801);    

    var timeout = setTimeout(function() {
            server.close();
        }, 2000);


    var p = new Prospero(sharedConfig);
    var cb = function(error, data) {
        assert.ok(!error);
        assert.equal(data.data.a, 1);
        server.close();
        clearTimeout(timeout);
    };
    p.unsubscribe(subId, cb);    
};

