{
  "name": "eclg-prospero",
  "description": "node.js Prospero library",
  "version": "2.1.2",
  "author": {
    "name": "Mike Brevoort",
    "email": "mikebre@ecollege.com"
  },
  "private": "true",
  "contributors": [
    {
      "name": "Mike Brevoort",
      "email": "mikebre@ecollege.com"
    },
    {
      "name": "Chris Chew",
      "email": "chrisch@ecollege.com"
    },
    {
      "name": "Mac Angell",
      "email": "maca@ecollege.com"
    }
  ],
  "dependencies": {
    "underscore": "1.3.1",
    "request": "2.9.153"
  },
  "devDependencies": {
    "expresso": "0.9.2",
    "express": "2.5.8",
    "docco-husky": "0.3.2"
  },
  "keywords": [
    "prospero",
    "messaging",
    "ecollege",
    "pearson"
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:PearsonEducation/prospero-node.git"
  },
  "homepage": "https://github.com/PearsonEducation/prospero-node",
  "main": "./index",
  "scripts": {
    "test": "make test"
  },
  "engines": {
    "node": ">= 0.6.11"
  },
  "docco_husky": {
    "output_dir": "docs/out",
    "content_dir": "docs/src",
    "project_name": "Prospero Node Library"
  },
  "optionalDependencies": {},
  "readme": "Prospero Node\n-------------\n\nA node.js library for Prospero to \n\n* subscribe\n* unsubscribe\n* publish messages\n* receive published messages\n* get subscription details\n\n\nWhere to find it\n----------------\n\nThe repository is at [Github](https://github.com/PearsonEducation/prospero-node) under the [PearsonEducation](https://github.com/PearsonEducation) organization. If you need access, ask Mike Brevoort, Chris Hatton or Chris Skudlarczyk.\n\nYou may depend on the module by putting an entry in the <code>devDependencies</code> section of your <code>package.json</code> file with the appropriate version specified after the hash:\n\n    \"eclg-prospero\": \"git+ssh://git@github.com:PearsonEducation/prospero-node.git#v2.1.1\",\n\nYou may also install the module locally in an ad-hoc fashion by:\n\n    npm install \"git+ssh://git@github.com:PearsonEducation/prospero-node.git#v2.1.1\"\n\nUsage\n-----\n\nAfter installing the module, you can <code>require</code> it and configure it like so:\n\n\tvar Prospero = require('eclg-prospero');\n\n\tvar prosperoConfig = {\n\t  rootUrl: \"http://localhost:4778\",\n\t  principal: \"ONE\",\n\t  sharedKey: \"1234567890123456\",\n\t  prosperoDefaults: {\n        tags: { UserID: \"joe\" },  // name value pairs --> TAGS\n        client: '',               // CLIENT\n        clientString: '',         // CLIENT-STRING\n        system: '',               // SYSTEM\n        subSystem: '',            // SUB-SYSTEM\n        realm: '',                // REALM\n        payloadContentType: '',   // PAYLOAD-CONTENT-TYPE\n\t  }\n\t};\n\n\tvar p = new Prospero(prosperoConfig);\n\t\nMost of the properties above should be familiar to you if you are using Prosero. The <code>prosperoDefaults</code> object is used as a set of defaults when publishing so that you don't have to continually pass the <code>client</code>, <code>clientString</code>, etc. The comments to the right of each property is the corresponding Prospero property.\t\n\n### Result Objects\n\nCalled to <code>subscribe</code>, <code>unsubscribe</code>, <code>getSubscription</code>, and <code>publish</code> return the same result object which has two properties: \n\n* <code>statusCode</code> - HTTP Status code from underlying Prospero call\n* <code>data</code> - HTTP body response from the underlying Prospero call\n\nFor example a <code>subscribe</code> call result looks like this:\n\n    { \n      statusCode: 200,\n      data: { \n        subscription: { \n          id: '75f2a3c0-2cd5-49b0-806f-55ab0614dcda',\n          principal_id: 'ONE',\n          callback_url: 'http://mycallbackurl.com/a/me',\n          wsdl_uri: '',\n          queue_name: 'Sub-75f2a3c0-2cd5-49b0-806f-55ab0614dcda',\n          date_created: '2012-03-14T03:02:08Z',\n          date_cancelled: '',\n          tags: [ \n              { \n                tag: { \n                  value: 'Node.Prospero.Test2',\n                  id: 'MessageType:Node.Prospero.Test2',\n                  type: 'MessageType' \n                } \n              },\n              { \n                tag: { \n                  value: 'joe', \n                  id: 'UserID:joe', \n                  type: 'UserID' \n                } \n              },\n              length: 2 \n          ]\n        } \n      } \n    }\n\n### Error Objects\n\nEach of the asyncronous calls that take callback parameters will return an [Error](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error) object as a 1st parameter. If there is no error the value of this parameter will be <code>null</code>, otherwise it will most likely be the passed through Error object from the HTTP call to Prospero\n\n### Subscribing\n\nAssuming you've configured the Prospero modude and required it like above, you can subscribe to messages with the <code>subscribe</code> function.\n\n\tvar options = {\n\t    messageType: \"Node.Prospero.Test\",            // MESSAGE-TYPE\n\t    callbackUrl: \"http://mycallbackurl.com/a/me\", // CALLBACK-URL\n\t    tags: { UserID: \"joe\" }                       // TAGS\n\t};\n\n\tp.subscribe(options, function(error, result) {\n\t\tif(error) console.log(\"Subscription failed!\", error);\n\t\t\n\t\tvar subId = result.data.subscription.id;\n\t});    \n\nNote that if a subscription already exists, the library will get the subscription Id and get <code>getSubscription</code> for you, returning the details of the existing subscription as if you just created it. In this case, Prospero will return a <code>409</code> statusCode but you will see a <code>200</code> statusCode as a result of the secondary GET.\n\n### Unsubscribing\n\nUse the <code>unsubscribe</code> function to unsubscribe: \n\n\tp.subscribe(subscriptionId, function(error, result) {\n        error && console.log(error);\n        if(data.statusCode === 200)\n            console.log(\"Unsubscribe of \" + subId + \"sucessful!\");\n\t});\n\t\nIf the call is successful, expect a <code>200</code> statusCode. If the subscription is not found, expect a <code>404</code> and if the subscriptionId is invalid you may receive a <code>400</code>.\n\n### Get Subscription by ID\n\nUse the <code>getSubscription</code> function to unsubscribe: \n\n\tgetSubscription(subscriptionId, function(error, result) {\n        error && console.log(error);\n        var subId = result.data.subscription.id;\n\t});    \n\nSame HTTP statusCodes as <code>unsubscribe</code> applies.\n\n\n### Publishing\n\nUsing the <code>publish</code> function, pass an object as the first parameter and a callback as the second. \n\nThe object passed to publish will be merged with the <code>prosperoDefaults</code>\nobject specified in the config. Any properties that are passed in here\nwill override the value in the defaults. Properties like <code>client</code>,\n<code>clientString</code>, <code>system</code>, <code>subSystem</code> would be appropriate to set up as defaults. \n\nAssuming the prospero config above:\n\n     var obj = {\n       tags: { UserID: \"joe\" },  \n       messageType: 'Node.Prospero.Test3',\n       payloadContentType: 'application/json',\n       payload: {\n         feeling: 'happy'\n       }\n     };\n     \n     p.publish(obj, function(error, result) {\n       error && console.log(error);\n       if(result.statusCode === 200)\n           var messageId = result.data.message.id;\n     });\n\n\n\n### Receiving a message\n\nHere's an example of setting up a Prospero message receiver with Express. You don't have to use express, but in case you do, the module will gracefully detect if you are using the <code>express.bodyParser()</code>.\n\nThe callback of the <code>receive</code> function expects three arguments:\n\n* <code>error</code> - Error object if there was one\n* <code>data</code> - the payload of the message, JSON parsed for you if <code>content-type</code> was <code>application/json</code>\n* <code>done</code> - a function you **MUST** call to tell Prospero if you accept or reject the message. If you are able to accept the message you call done with no parameters or with a boolean <code>true</code> and an optional response message. If you reject the message and need Prospero to attempt to redeliver it in the future, you call done but with a boolean <code>false</code> like <code>done(false)</code>. If you don't call <code>done()</code> the HTTP connection from Prospero will not be closed!\n\nThe example assumes you have a subscription with a callback to <code>http://localhost:8000/receive</code>.\n\n    var express = require('express')\n      , Prospero = require('../lib/prospero').Prospero\n      , server = express.createServer();\n    \n    var prosperoConfig = {\n      host: \"localhost\",\n      port: 4778,\n      principal: \"ONE\",\n      sharedKey: \"1234567890123456\",\n      prosperoDefaults: {}\n    };\n    \n    var p = new Prospero(prosperoConfig);\n        \n    server.configure(function() {\n    \tserver.use(express.bodyParser()); // optional\n    \tserver.use(server.router);\n    });\n    \n    server.post('/receive', function(req, res) {\n    \tp.receive(req, res, function(error, data, done) {\n    \t\tif(error) {\n    \t\t\tconsole.log(\"There was an error!!\", error);\n    \n    \t\t\t// reject the message by passing false to done\n    \t\t\treturn done(false);\n    \t\t}\n    \n    \t\t// do something with data\n    \t\tconsole.log(\"The message payload was (drum roll) \", data);\n    \n    \t\t// to accept the message and return 200 to prospero, call\n    \t\t// done with no args or true\n    \t\tdone();\n    \t};);\n    });\n    \n    server.listen(8000);\n\n\nChangelog\n---------\n\nv2.1.1 *4/11/2012* - aes library cleanup, removed globals and added license header (merged pull request from mac-)\n\nv2.1.0 *3/16/2012* - done() callback on receive now accepts an optional message to be returned to Prospero when a message is rejected. This string appears in the Prospero audit log in the \"del_ref\" field.\n\nv2.0.0 *3/14/2012* - Major changes to the API, replaced the internal HTTP calls with the request module, added more tests and much more documentation and code comments. ",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/PearsonEducation/prospero-node/issues"
  },
  "_id": "eclg-prospero@2.1.2",
  "dist": {
    "shasum": "016cb1e9adedfc0b1005287e0c1e57e31c652ffb"
  },
  "_from": "/Users/uivesse/Repos/prospero-node/"
}
